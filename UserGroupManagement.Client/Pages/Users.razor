@page "/users"
@inject IUserApiService userApiService;
@inject NavigationManager navigationManager;

@using UserGroupManagement.Client.Services
@using UserGroupManagement.Common.DTOs

<h3>Users</h3>

<p><button @onclick="@(() => navigationManager.NavigateTo("/add-user"))">Add User</button></p>

@if(users == null)
{
    <p><em>Loading....</em></p>    
}else
{

    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Email</th>
            <th>Age</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var user in users ?? new List<UserDto>())
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.FirstName @user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.Age</td>
                    <td>
                        <button @onclick="@(() => Edit(user.Id))">Edit</button>
                        <button @onclick="@(() => Delete(user.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<UserDto>? users;

    protected override async Task OnInitializedAsync()
    {
        //return base.OnInitializedAsync();
        users = await userApiService.GetAllUsersAsync();
    }

    void Edit(int id) => navigationManager.NavigateTo($"/edit-user/{id}");

    async Task Delete(int id)
    {
        await userApiService.DeleteUserAsync(id);
        users = await userApiService.GetAllUsersAsync();
    }
}
